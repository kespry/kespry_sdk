/*
 * Firmatek Missions API
 * Missions API for accessing Missions in the Kespry Platform
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Marker', 'model/MarkerVolume', 'model/Mission', 'model/Site'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Marker'), require('../model/MarkerVolume'), require('../model/Mission'), require('../model/Site'));
  } else {
    // Browser globals (root is window)
    if (!root.FirmatekMissionsApi) {
      root.FirmatekMissionsApi = {};
    }
    root.FirmatekMissionsApi.V1Api = factory(root.FirmatekMissionsApi.ApiClient, root.FirmatekMissionsApi.Marker, root.FirmatekMissionsApi.MarkerVolume, root.FirmatekMissionsApi.Mission, root.FirmatekMissionsApi.Site);
  }
}(this, function(ApiClient, Marker, MarkerVolume, Mission, Site) {
  'use strict';

  /**
   * V1 service.
   * @module api/V1Api
   * @version 1.0
   */

  /**
   * Constructs a new V1Api. 
   * @alias module:api/V1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getMarkerVolumes operation.
     * @callback module:api/V1Api~getMarkerVolumesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MarkerVolume>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} missionId ID of the mission
     * @param {Number} siteId ID of the site
     * @param {module:api/V1Api~getMarkerVolumesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MarkerVolume>}
     */
    this.getMarkerVolumes = function(missionId, siteId, callback) {
      var postBody = null;

      // verify the required parameter 'missionId' is set
      if (missionId === undefined || missionId === null) {
        throw new Error("Missing the required parameter 'missionId' when calling getMarkerVolumes");
      }

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getMarkerVolumes");
      }


      var pathParams = {
        'mission_id': missionId,
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [MarkerVolume];

      return this.apiClient.callApi(
        '/v1/sites/{site_id}/missions/{mission_id}/volumes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarkers operation.
     * @callback module:api/V1Api~getMarkersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Marker>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} missionId ID of the mission
     * @param {Number} siteId ID of the site
     * @param {module:api/V1Api~getMarkersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Marker>}
     */
    this.getMarkers = function(missionId, siteId, callback) {
      var postBody = null;

      // verify the required parameter 'missionId' is set
      if (missionId === undefined || missionId === null) {
        throw new Error("Missing the required parameter 'missionId' when calling getMarkers");
      }

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getMarkers");
      }


      var pathParams = {
        'mission_id': missionId,
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Marker];

      return this.apiClient.callApi(
        '/v1/sites/{site_id}/missions/{mission_id}/markers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMissions operation.
     * @callback module:api/V1Api~getMissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} siteId ID of the site
     * @param {module:api/V1Api~getMissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mission>}
     */
    this.getMissions = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getMissions");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Mission];

      return this.apiClient.callApi(
        '/v1/sites/{site_id}/missions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMissionsLatestForSite operation.
     * @callback module:api/V1Api~getMissionsLatestForSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} siteId ID of the site
     * @param {module:api/V1Api~getMissionsLatestForSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mission}
     */
    this.getMissionsLatestForSite = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getMissionsLatestForSite");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Mission;

      return this.apiClient.callApi(
        '/v1/sites/{site_id}/missions/latest', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSites operation.
     * @callback module:api/V1Api~getSitesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Site>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/V1Api~getSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Site>}
     */
    this.getSites = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Site];

      return this.apiClient.callApi(
        '/v1/sites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
