/*
 * Firmatek Missions API
 * Missions API for accessing Missions in the Kespry Platform
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FirmatekMissionsApi);
  }
}(this, function(expect, FirmatekMissionsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MarkerVolume', function() {
      beforeEach(function() {
        instance = new FirmatekMissionsApi.MarkerVolume();
      });

      it('should create an instance of MarkerVolume', function() {
        // TODO: update the code to test MarkerVolume
        expect(instance).to.be.a(FirmatekMissionsApi.MarkerVolume);
      });

      it('should have the property num (base name: "num")', function() {
        // TODO: update the code to test the property num
        expect(instance).to.have.property('num');
        // expect(instance.num).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property surfaceDesc (base name: "surface_desc")', function() {
        // TODO: update the code to test the property surfaceDesc
        expect(instance).to.have.property('surfaceDesc');
        // expect(instance.surfaceDesc).to.be(expectedValueLiteral);
      });

      it('should have the property sku (base name: "sku")', function() {
        // TODO: update the code to test the property sku
        expect(instance).to.have.property('sku');
        // expect(instance.sku).to.be(expectedValueLiteral);
      });

      it('should have the property surfaceArea (base name: "surfaceArea")', function() {
        // TODO: update the code to test the property surfaceArea
        expect(instance).to.have.property('surfaceArea');
        // expect(instance.surfaceArea).to.be(expectedValueLiteral);
      });

      it('should have the property perimeter (base name: "perimeter")', function() {
        // TODO: update the code to test the property perimeter
        expect(instance).to.have.property('perimeter');
        // expect(instance.perimeter).to.be(expectedValueLiteral);
      });

      it('should have the property cutVolume (base name: "cutVolume")', function() {
        // TODO: update the code to test the property cutVolume
        expect(instance).to.have.property('cutVolume');
        // expect(instance.cutVolume).to.be(expectedValueLiteral);
      });

      it('should have the property fillVolume (base name: "fillVolume")', function() {
        // TODO: update the code to test the property fillVolume
        expect(instance).to.have.property('fillVolume');
        // expect(instance.fillVolume).to.be(expectedValueLiteral);
      });

      it('should have the property threshold (base name: "threshold")', function() {
        // TODO: update the code to test the property threshold
        expect(instance).to.have.property('threshold');
        // expect(instance.threshold).to.be(expectedValueLiteral);
      });

      it('should have the property offset (base name: "offset")', function() {
        // TODO: update the code to test the property offset
        expect(instance).to.have.property('offset');
        // expect(instance.offset).to.be(expectedValueLiteral);
      });

      it('should have the property computedDensity (base name: "computedDensity")', function() {
        // TODO: update the code to test the property computedDensity
        expect(instance).to.have.property('computedDensity');
        // expect(instance.computedDensity).to.be(expectedValueLiteral);
      });

      it('should have the property cutMass (base name: "cutMass")', function() {
        // TODO: update the code to test the property cutMass
        expect(instance).to.have.property('cutMass');
        // expect(instance.cutMass).to.be(expectedValueLiteral);
      });

      it('should have the property fillMass (base name: "fillMass")', function() {
        // TODO: update the code to test the property fillMass
        expect(instance).to.have.property('fillMass');
        // expect(instance.fillMass).to.be(expectedValueLiteral);
      });

      it('should have the property usesExtracted (base name: "usesExtracted")', function() {
        // TODO: update the code to test the property usesExtracted
        expect(instance).to.have.property('usesExtracted');
        // expect(instance.usesExtracted).to.be(expectedValueLiteral);
      });

    });
  });

}));
