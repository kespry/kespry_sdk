/*
 * Firmatek Missions API
 * Missions API for accessing Missions in the Kespry Platform
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FirmatekMissionsApi);
  }
}(this, function(expect, FirmatekMissionsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Marker', function() {
      beforeEach(function() {
        instance = new FirmatekMissionsApi.Marker();
      });

      it('should create an instance of Marker', function() {
        // TODO: update the code to test Marker
        expect(instance).to.be.a(FirmatekMissionsApi.Marker);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property imageId (base name: "image_id")', function() {
        // TODO: update the code to test the property imageId
        expect(instance).to.have.property('imageId');
        // expect(instance.imageId).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property markerType (base name: "marker_type")', function() {
        // TODO: update the code to test the property markerType
        expect(instance).to.have.property('markerType');
        // expect(instance.markerType).to.be(expectedValueLiteral);
      });

      it('should have the property shapeType (base name: "shape_type")', function() {
        // TODO: update the code to test the property shapeType
        expect(instance).to.have.property('shapeType');
        // expect(instance.shapeType).to.be(expectedValueLiteral);
      });

      it('should have the property pileId (base name: "pile_id")', function() {
        // TODO: update the code to test the property pileId
        expect(instance).to.have.property('pileId');
        // expect(instance.pileId).to.be(expectedValueLiteral);
      });

      it('should have the property knownSurfaceId (base name: "known_surface_id")', function() {
        // TODO: update the code to test the property knownSurfaceId
        expect(instance).to.have.property('knownSurfaceId');
        // expect(instance.knownSurfaceId).to.be(expectedValueLiteral);
      });

      it('should have the property density (base name: "density")', function() {
        // TODO: update the code to test the property density
        expect(instance).to.have.property('density');
        // expect(instance.density).to.be(expectedValueLiteral);
      });

      it('should have the property offset (base name: "offset")', function() {
        // TODO: update the code to test the property offset
        expect(instance).to.have.property('offset');
        // expect(instance.offset).to.be(expectedValueLiteral);
      });

      it('should have the property fixedElevation (base name: "fixed_elevation")', function() {
        // TODO: update the code to test the property fixedElevation
        expect(instance).to.have.property('fixedElevation');
        // expect(instance.fixedElevation).to.be(expectedValueLiteral);
      });

      it('should have the property geojson (base name: "geojson")', function() {
        // TODO: update the code to test the property geojson
        expect(instance).to.have.property('geojson');
        // expect(instance.geojson).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated_at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "created_by")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property updatedBy (base name: "updated_by")', function() {
        // TODO: update the code to test the property updatedBy
        expect(instance).to.have.property('updatedBy');
        // expect(instance.updatedBy).to.be(expectedValueLiteral);
      });

      it('should have the property locked (base name: "locked")', function() {
        // TODO: update the code to test the property locked
        expect(instance).to.have.property('locked');
        // expect(instance.locked).to.be(expectedValueLiteral);
      });

      it('should have the property isManual (base name: "is_manual")', function() {
        // TODO: update the code to test the property isManual
        expect(instance).to.have.property('isManual');
        // expect(instance.isManual).to.be(expectedValueLiteral);
      });

      it('should have the property useExtracted (base name: "use_extracted")', function() {
        // TODO: update the code to test the property useExtracted
        expect(instance).to.have.property('useExtracted');
        // expect(instance.useExtracted).to.be(expectedValueLiteral);
      });

      it('should have the property productId (base name: "product_id")', function() {
        // TODO: update the code to test the property productId
        expect(instance).to.have.property('productId');
        // expect(instance.productId).to.be(expectedValueLiteral);
      });

      it('should have the property volumeMode (base name: "volume_mode")', function() {
        // TODO: update the code to test the property volumeMode
        expect(instance).to.have.property('volumeMode');
        // expect(instance.volumeMode).to.be(expectedValueLiteral);
      });

      it('should have the property volume (base name: "volume")', function() {
        // TODO: update the code to test the property volume
        expect(instance).to.have.property('volume');
        // expect(instance.volume).to.be(expectedValueLiteral);
      });

      it('should have the property defeaturedVolume (base name: "defeatured_volume")', function() {
        // TODO: update the code to test the property defeaturedVolume
        expect(instance).to.have.property('defeaturedVolume');
        // expect(instance.defeaturedVolume).to.be(expectedValueLiteral);
      });

      it('should have the property basePoints (base name: "base_points")', function() {
        // TODO: update the code to test the property basePoints
        expect(instance).to.have.property('basePoints');
        // expect(instance.basePoints).to.be(expectedValueLiteral);
      });

    });
  });

}));
